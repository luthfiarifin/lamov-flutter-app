// Mocks generated by Mockito 5.4.4 from annotations
// in lamov_flutter_app/test/mock/test_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lamov_flutter_app/core/data/data.dart' as _i6;
import 'package:lamov_flutter_app/core/domain/common/model/model.dart' as _i3;
import 'package:lamov_flutter_app/feature/detail/data/datasource/datasource.dart'
    as _i11;
import 'package:lamov_flutter_app/feature/detail/domain/param/param.dart'
    as _i10;
import 'package:lamov_flutter_app/feature/detail/domain/repository/detail_repository.dart'
    as _i9;
import 'package:lamov_flutter_app/feature/home/data/datasource/datasource.dart'
    as _i8;
import 'package:lamov_flutter_app/feature/home/domain/param/param.dart' as _i7;
import 'package:lamov_flutter_app/feature/home/domain/repository/home_repository.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseModel_1<T> extends _i1.SmartFake implements _i3.BaseModel<T> {
  _FakeBaseModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieModel_2 extends _i1.SmartFake implements _i3.MovieModel {
  _FakeMovieModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i4.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i3.GenreModel>>> getMovieGenres() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieGenres,
          [],
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i3.GenreModel>>>.value(
                _FakeEither_0<_i6.Failure, List<_i3.GenreModel>>(
          this,
          Invocation.method(
            #getMovieGenres,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i3.GenreModel>>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>> getNowPlaying(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlaying,
          [param],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>.value(
            _FakeEither_0<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>(
          this,
          Invocation.method(
            #getNowPlaying,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>> getDiscover(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscover,
          [param],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>.value(
            _FakeEither_0<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>(
          this,
          Invocation.method(
            #getDiscover,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>> getPopular(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopular,
          [param],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>.value(
            _FakeEither_0<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>(
          this,
          Invocation.method(
            #getPopular,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>> getTopRated(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRated,
          [param],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>.value(
            _FakeEither_0<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>(
          this,
          Invocation.method(
            #getTopRated,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.MovieModel>>>);
}

/// A class which mocks [HomeRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRemoteDataSource extends _i1.Mock
    implements _i8.HomeRemoteDataSource {
  MockHomeRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.GenreModel>> getMovieGenres() => (super.noSuchMethod(
        Invocation.method(
          #getMovieGenres,
          [],
        ),
        returnValue: _i5.Future<List<_i3.GenreModel>>.value(<_i3.GenreModel>[]),
      ) as _i5.Future<List<_i3.GenreModel>>);

  @override
  _i5.Future<_i3.BaseModel<_i3.MovieModel>> getNowPlaying(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNowPlaying,
          [param],
        ),
        returnValue: _i5.Future<_i3.BaseModel<_i3.MovieModel>>.value(
            _FakeBaseModel_1<_i3.MovieModel>(
          this,
          Invocation.method(
            #getNowPlaying,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.BaseModel<_i3.MovieModel>>);

  @override
  _i5.Future<_i3.BaseModel<_i3.MovieModel>> getDiscover(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDiscover,
          [param],
        ),
        returnValue: _i5.Future<_i3.BaseModel<_i3.MovieModel>>.value(
            _FakeBaseModel_1<_i3.MovieModel>(
          this,
          Invocation.method(
            #getDiscover,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.BaseModel<_i3.MovieModel>>);

  @override
  _i5.Future<_i3.BaseModel<_i3.MovieModel>> getPopular(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPopular,
          [param],
        ),
        returnValue: _i5.Future<_i3.BaseModel<_i3.MovieModel>>.value(
            _FakeBaseModel_1<_i3.MovieModel>(
          this,
          Invocation.method(
            #getPopular,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.BaseModel<_i3.MovieModel>>);

  @override
  _i5.Future<_i3.BaseModel<_i3.MovieModel>> getTopRated(
          _i7.GetMoviesPaginationParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTopRated,
          [param],
        ),
        returnValue: _i5.Future<_i3.BaseModel<_i3.MovieModel>>.value(
            _FakeBaseModel_1<_i3.MovieModel>(
          this,
          Invocation.method(
            #getTopRated,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.BaseModel<_i3.MovieModel>>);
}

/// A class which mocks [DetailRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailRepository extends _i1.Mock implements _i9.DetailRepository {
  MockDetailRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i3.MovieModel>> getDetail(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDetail,
          [id],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i3.MovieModel>>.value(
            _FakeEither_0<_i6.Failure, _i3.MovieModel>(
          this,
          Invocation.method(
            #getDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.MovieModel>>);

  @override
  _i5.Future<
      _i2.Either<_i6.Failure, _i3.BaseModel<_i3.ReviewModel>>> getReviews(
          _i10.GetReviewParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviews,
          [param],
        ),
        returnValue: _i5.Future<
                _i2.Either<_i6.Failure, _i3.BaseModel<_i3.ReviewModel>>>.value(
            _FakeEither_0<_i6.Failure, _i3.BaseModel<_i3.ReviewModel>>(
          this,
          Invocation.method(
            #getReviews,
            [param],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i3.BaseModel<_i3.ReviewModel>>>);
}

/// A class which mocks [DetailRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailRemoteDataSource extends _i1.Mock
    implements _i11.DetailRemoteDataSource {
  MockDetailRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.MovieModel> getDetail(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getDetail,
          [id],
        ),
        returnValue: _i5.Future<_i3.MovieModel>.value(_FakeMovieModel_2(
          this,
          Invocation.method(
            #getDetail,
            [id],
          ),
        )),
      ) as _i5.Future<_i3.MovieModel>);

  @override
  _i5.Future<_i3.BaseModel<_i3.ReviewModel>> getReviews(
          _i10.GetReviewParam? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #getReviews,
          [param],
        ),
        returnValue: _i5.Future<_i3.BaseModel<_i3.ReviewModel>>.value(
            _FakeBaseModel_1<_i3.ReviewModel>(
          this,
          Invocation.method(
            #getReviews,
            [param],
          ),
        )),
      ) as _i5.Future<_i3.BaseModel<_i3.ReviewModel>>);
}
